const { applyAlgorithm, litPixelsOf, pad, unpad } = require("./part1");

describe("Trench Map: Part I", () => {
  // prettier-ignore
  const image = [
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".","#",".",".","#",".",".",".",".",".","."],
    [".",".",".",".",".","#",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".","#","#",".",".","#",".",".",".",".","."],
    [".",".",".",".",".",".",".","#",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".","#","#","#",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
  ];

  // prettier-ignore
  const outputImage1 = [
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".","#","#",".","#","#",".",".",".",".","."],
    [".",".",".",".","#",".",".","#",".","#",".",".",".",".","."],
    [".",".",".",".","#","#",".","#",".",".","#",".",".",".","."],
    [".",".",".",".","#","#","#","#",".",".","#",".",".",".","."],
    [".",".",".",".",".","#",".",".","#","#",".",".",".",".","."],
    [".",".",".",".",".",".","#","#",".",".","#",".",".",".","."],
    [".",".",".",".",".",".",".","#",".","#",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
  ]

  // prettier-ignore
  const outputImage2 = [
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".","#",".",".",".","."],
    [".",".",".",".","#",".",".","#",".","#",".",".",".",".","."],
    [".",".",".","#",".","#",".",".",".","#","#","#",".",".","."],
    [".",".",".","#",".",".",".","#","#",".","#",".",".",".","."],
    [".",".",".","#",".",".",".",".",".","#",".","#",".",".","."],
    [".",".",".",".","#",".","#","#","#","#","#",".",".",".","."],
    [".",".",".",".",".","#",".","#","#","#","#","#",".",".","."],
    [".",".",".",".",".",".","#","#",".","#","#",".",".",".","."],
    [".",".",".",".",".",".",".","#","#","#",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
  ]

  describe("enhanceImage", () => {
    const algorithm = [
      "..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..##",
      "#..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###",
      ".######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#.",
      ".#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#.....",
      ".#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#..",
      "...####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.....",
      "..##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#",
    ].flatMap((line) => line.split(""));

    it("should create an enhanced image", () => {
      expect(unpad(applyAlgorithm(image, algorithm, 1), 1)).toEqual(
        outputImage1
      );
    });

    it("should create an image that has been enhanced twice", () => {
      expect(unpad(applyAlgorithm(image, algorithm, 2), 2)).toEqual(
        outputImage2
      );
    });
  });

  describe("litPixelsOf", () => {
    it("count the lit pixels of an image", () => {
      expect(litPixelsOf(outputImage2)).toEqual(35);
    });
  });

  describe("pad", () => {
    it("should pad an image for one enhancement", () => {
      const image = [
        ["#", "#", "#"],
        ["#", ".", "#"],
        ["#", "#", "#"],
      ];
      expect(pad(image, 1)).toEqual([
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", "#", ".", "#", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
      ]);
    });

    it("should pad an image for two enhancements", () => {
      const image = [
        ["#", "#", "#"],
        ["#", ".", "#"],
        ["#", "#", "#"],
      ];
      expect(pad(image, 2)).toEqual([
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", "#", "#", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", "#", ".", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", "#", "#", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      ]);
    });
  });

  describe("unpad", () => {
    it("should unpad an image that has been enhanced once", () => {
      const image = [
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", "#", ".", "#", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
      ];
      expect(unpad(image, 1)).toEqual([
        [".", ".", ".", ".", "."],
        [".", "#", "#", "#", "."],
        [".", "#", ".", "#", "."],
        [".", "#", "#", "#", "."],
        [".", ".", ".", ".", "."],
      ]);
    });

    it("should unpad an image that has been enhanced twice", () => {
      const image = [
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", "#", ".", "#", ".", "."],
        [".", ".", "#", "#", "#", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "."],
      ];
      expect(unpad(image, 2)).toEqual([
        ["#", "#", "#"],
        ["#", ".", "#"],
        ["#", "#", "#"],
      ]);
    });
  });
});
